

     观察者模式：
        
        
     1、定义：
        
                        定义对象间一种一对多的依赖关系，当一个对象的状态改变时，所有依赖于他的对象都得到通知并自动更新
                                 
            Subject:  被观察者，观察者的目标
                     一                          1、 一个目标可以被多个观察者观察
                  2、目标提供对观察者的注册和退订的维护
                  3、当目标的状态发生变化，目标负责通知所有注册、有效的观察者   
                  
            Observer: 观察者接口，提供通知时，对应的更新的方法，可以在这个方法获取目标对象数据
            
            ConcreteSubject: 具体目标对象的实现类
            ConcreteObserver: 具体的观察者实现类
                    
            
                   
                      
                   
 

     2、场景：读者订阅报社的报纸，当一有报纸的时候，则发送到读者手中。 其中读者相当于观察者，报纸相当于目标对象
        
        
     3、实现：
        
                                自己实现  或者使用java提供的util包实现Observable 
                                
                        目标对象：                         
                                一个目标可以被多个观察者观察
                               目标对象对观察的注册和退订的维护     
                               当目标的状态发送变化时，目标负责通知所有注册的，有效的观察者                              
                                 
                                
                                
                                
                                
     4、分类：推送和拉取。
                                 推送：则只传递需要的数据，
                                 拉取：则传递目标对象，需要数据通过目标对象获取           
                                 
                                 
     5、本质：
      
            1、 被观察者 维护 观察者 集合
            2、当被观察者状态改变，则依次遍历观察者集合，从而通知观察者
            3、通知观察者时，可以传递需要的数据，或者传递被观察者对象；前者称为推送，后者称为拉取。                                     
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                              
                                                                   