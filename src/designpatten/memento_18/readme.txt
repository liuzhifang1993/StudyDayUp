
 备忘录模式：
 
       一、说明：
    
       1、模式定义：
       
                         在不破坏封装性的提前下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态       
                  
                          一个备忘录是一个对象，他存储另一个对象（原发器）在某个瞬间的内部状态，后者被称为备忘录的原发器
       
       2、模式说明：
       
          (1)原发器： 模拟流程运行的对象就是原发器
          
                   a、有需要被保存状态的数据，并提供捕获某个时候对象内部状态的方法
                   b、具有创建备忘录对象的功能，设置备忘录对象进行恢复数据的功能        
                                                    
          (2)备忘录对象：由于要保存的原发器的数据原来是零散的，所以现在通过备忘录对象来存储数据，
                                                           并且将这个备忘录对象实现为私有内部类，避免外部操作
                                                           
                   a、备忘录对象只能原发器来操作，为了避免其他对象操作，所以实现为私有内部类
                   b、为了和外部交互，通过实现一个窄接口来标识对象的类型                                                                      
                                                            
          (3)备忘录管理者：当然为了保存备忘录对象，需要提供一个管理者。    
                   
                   a、不一定需要特别做出一个管理者，通常，备忘录对象放在哪儿，哪个对象相当于管理者对象。 
                   b、管理者对象不一定只能管理一个备忘录对象，也可以管理多个，通过窄接口标识区分。 
                   c、管理者仅仅负责存储备忘录对象，但不能访问备忘录对象的数据。                                                                                  
                
          (4)窄接口：为了和管理者对象交互，管理者还需要知道保存对象的类型，所以就提供了一个备忘录对象的窄接口来供管理者使用
                                                     相当于标识了类型       
    
       3、认识备忘录模式：
         
                           （1）、备忘录的功能：首先在不破坏封装性的前提下，捕获一个对象的内部状态
                                                                  注意两点，一个是不破坏封装性，即对象不能暴露不该暴露的细节
                                                                                    另一个是捕获对象的内部状态，而且是运行期间某个时刻对象的内部状态                                 
    
                           （2）、潜在的代价：
                                        标准的备忘录是使用缓存来实现的，因此如果备忘的数据量较大的时候，或者存储的备忘录对象数据量不大单是对象很多，
                                        或者用户频繁的创建备忘录对象的时候，这些开销都很大。         
             
                            
       4、增量存储：
       
                                    如果需要频繁的创建备忘录对象，而且创建和应用备忘录对象来恢复的顺序是可控的，那么可以让备忘录进行增量存储。
                             也就是备忘录仅仅存储原发器内部相对于上一次存储状态的增量改变                       
                            
                                    比如在命令模式可撤销的命令实现中，就可以使用备忘录来保存每个命令对应的状态，然后在撤销命令的时候，
                           使用备忘录来恢复这些状态。因为命令的历史列表是安装操作命令存放的。
                           
                                   那么这种情况，还可以让备忘录对象只存储一个命令所产生的增量改变，而不是她所影响的每一个对象的完整状态                
              
              
       5、结合原型模式：
       
                            在原发器对象创建备忘录对象的时候，如果原发器对象全部或者大部分的状态都需要保存 ，一个简洁的方式就是直接克隆一个对象
                     也就是说这个时候备忘录对象存放的是一个原发器的实例  
                     
                            改变：
             1、原发对象要实现可克隆的
             2、备忘录存储数据改为存储原发器的对象
             
                          具体见test2    
          
       6、离线存储 
       
                          就是把备忘录类存储在文件中、xml中、数据库中
                          从而支持跨越会话的备份和恢复功能       
                                               
                         具体见 test3    
                         
       7、备忘录模式和命令模式相结合
       
                         针对之前的撤销操作，除了之前命令模式通过反操作式 --  比如之前操作是加，那么撤销是减操作
                         还有一种恢复式操作 -- 记录操作之前的状态，撤销就是直接恢复回去                                  
             
                         具体见 test4    
                     
       8、使用备忘录模式的时机
       
                      （1）如果必须保持一个对象在某个时刻的全部或者部分状态，方便在以后需要的时候，把改对象恢复到先前的状态，可以使用备忘录模式               
                     
                     
                         
   
       二、示例：
       
                          有一个仿真系统，模拟运行针对某个具体问题的多个解决方案，记录运行过程的各种数据。模拟运行完成之后，方便对多个解决方式
                  进行比较和评价，从而选出最优解。
         
                         由于要模拟运行多个解决方案，而且要跟据最后的运行结果来进行评价  ，这意味着每个方案后半部分的初始数据都是一样的，也就是
                  在运行每个方案后半部分之前要保证都是前半部分产生的数据。
         
                 总结：就是要保证初始数据一致                                    
       
       
       1、不用模式解决方案。
       
          (1)、首先模拟运行流程第一个阶段，得到后阶段各个方案运行需要的数据，并把数据保存下来，以备后用
          (2)、每次在模拟运行某个方案之前，用保存的数据去重新设置模拟运行流程的对象
          
        