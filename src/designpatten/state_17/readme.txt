
  状态模式：
 
          一、说明：
    
      1、定义：
       
                      允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类
      
      2、模式讲解：
      
                       所谓对象的状态：通常是指的对象实例的属性
                               对象的行为：通常是指对象的功能 ，具体点就是对象的方法
                               
                         状态决定行为                                 
                               由于状态是在运行期间被改变的，因此行为也会在运行期间根据状态改变而改变，看起来，同一个对象在不同
                               的运行时刻，行为是不一样的，像是类被修改了一样。                   
    
      3、与策略模式的区别：
        
                             策略模式的行为是平等的，可以互相替换的
                             状态模式的行为是平行的，不可互相替换的
                             
      4、上下文：
      
                            跟策略模式类似 。上下文持有状态对象，本身不处理状态相关行为，而是将功能委托给状态处理类
                            同时，状态处理类从上下文获取需要的数据   
                                
      5、创建和销毁对象
        
          1、当需要使用状态对象的时候创建，使用完销毁他们    -- 上下文稳定，不会经常改变状态
          2、提交创建始终不销毁  -- 状态改变频繁，而且频繁创建对象
          3、采用延迟加载和缓存合用的方式 ，等待下次使用，而且在合适的时候由缓存框架销毁。  -- 无法确定状态是否改变频繁，数据量无法确定
    
      6、状态的维护和转换控制
      
                          一个是在上下文中， 如test1示例   
                 -- 规则是一定的，一般不需要进行扩展。
                         一个是在状态的处理类中，如test2示例，当每个状态处理完自身状态对应功能可以跟进需要指定后继状态                
                 -- 如果状态的转换取决上一个状态处理结果，或者依赖外部数据则使用上种。
      
      7、使用数据库维护状态
      
                             在开发中，还可以使用数据库来存储状态，每一次改变将状态存在数据库当中。程序通过查询状态，创建相应的状态类
                             还可以将状态对应的实现类存储在文件中，这样可以跟据状态反射实现类，                   
    
      
      8、状态模式优点：
      
                           对于依赖于状态的if-else，理论上都可以通过状态模式来实现
                           可以更好的分离状态和行为
    
      9、状态模式本质：
      
                            跟据状态来分离和选择行为
                           上下文主要负责公共状态的驱动，每当状态发生变化，都是回调上下文来执行状态对应的功能                  
          
      10、状态模式适用场景：
      
                           如果一个对象的行为取决于他的状态，而且他必须是在运行时刻跟据状态来改变它的行为，则可以使用状态模式    
                           如果一个操作有很多分支语句，且这些分支依赖于它的状态，可以使用状态模式                  
    
    
    
          二、示例说明1：
     
       1、示例
         
                          考虑一个在线投票应用，要实现控制同一个用户只能投一票，
                              如果一个用户反复投票，并且投票次数超过5次，则判断为恶意刷票 ，要取消该用户投票的资格，当然也要取消投的票
                              如果一个用户投票超过8次，将进入黑名单，禁止登陆和使用系统   
                             
                          分析，一共有四种情况：
           1、用户正常投票
           2、用户正常投票，有意无意重复投票
           3、用户恶意投票
           4、黑名单投票              
                         
        2、分析：
        
                             （1）、具体实现键example， 发现都是if-else，不易于维护                 
                             （2）、仔细分析发现，那几种投票的类型相当于描述了人员的几种投票状态 ，而各个状态和对应功能处理有很强的
                                           对应性，类似一个萝卜一个坑  ，各个状态处理不一样，不能互相替换                                                    
                             （3）、解决思路： 就是把状态和状态对应的行为分离出来,每个状态所对应的功能封装在一个独立的类中，这样选择
                                           不同的处理，其实就是选择不同的状态处理类  ，同时为了统一操作这些不同的状态类，定义一个接口去约束他们
                                            这样外部就可以面向这个统一的接口编程，而无需关心具体的状态实现类。                                                    
                          
                          
       三、示例说明2：
         
               请假流程：
         
                          当某人提出请假，先经过项目经理批准，如果项目经理不同意，则审批直接结束
                          如果项目经理同意，再看请假天数是否超过3天（项目经理审批权限只有3天）：
                                                 如果请假天数3天内，则审批结束 。  
                                                 如果请假天数超过3天，则提交部门经理        
                          不论部门经理是否同意，审批都结束
       
                实际开发中，如果不考虑使用工作流软件，安装自己实现的话，这个流程运行过程描述如下：  
          1、UI操作：请假人员填写请假单，提出请假申请
          2、后台处理：保存请假单到数据库，然后为项目经理创建一个工作，并把工作信息保存在数据库
          3、UI操作：项目经理登录系统，或者自己的工作列表
          4、后台处理：从数据库获取相应的工作列表
          5、UI处理：项目经理完成审核，提交保存
          6、后台处理：处理项目经理审核的业务，保存审核信息到数据库；同时判断后续的工作，如果需要人员参与，
                                                      就为下一个参与人员创建工作，并把工作保存在数据库中
          7、UI操作：部门经理登录系统，或者自己的工作列表，重复第3步
          8、后台处理：从数据库中获取相应的工作列表，重复第4步
          9、UI操作：部门经理完成审核工作，提交保存，重复第5步
          10、后台处理：类推，基本重复第6步                                            
       
                 仔细分析以上流程：整个流程其实就是状态所驱动的流程
          1、当请假人员填写请假单，提出请假申请后，该假单状态是：等待项目经理审核状态  
          2、当项目经理完成审核工作，提交保存，如果项目经理不同意，该订单状态：审核结束状态
                                                   如果项目经理同意，并且天数在3天内，则该订单状态：审核结束状态
                                                   如果项目经理同意，但天数在3天只上，则该订单状态是：等待部门经理审核状态
          3、当部门经理身为完成，无论是否同意，改订单状态是：审核结束状态                 
                          
                  既然是状态驱动，那么可以使用状态模式                    
                          
                          
                          
                          
                          
                          
          
                            
                                             
                               