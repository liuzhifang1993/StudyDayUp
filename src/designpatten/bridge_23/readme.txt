

    桥接模式
    
    
     一、说明：
    
      1、桥接模式定义：
      
                           将抽象部分和它的实现部分分离，使他们可以独立的变化。             
                                        
                           上面的例子，变化的部分有两个维度：
                                   一个是抽象的消息，包括普通消息、加急消息和特急消息，这几个消息本身具有一定的关系，比如加急消息会扩展普通消息                  
                                  另一个是消息的具体发送方式：包括站内短消息、E-mail消息、手机短消息                       
    
                             要想解决这个问题就得把抽象部分和实现部分分开，使其相互独立变化
                             
          Abstraction:抽象部分的接口
          RefinedAbstarction:扩展抽象部分的接口
          Implementor: 定义实现部分的接口
          ConcreteImplementor:真正实现Implementor接口的对象。                   
    
     2、什么是桥接模式
     
                       所谓的桥接模式就是在不同的东西之间搭建一个桥，让他们能够连接起来，可以互相通讯和使用
                       为了达到抽象部分和实现部分可以独立变化 ，虽然结构上分开了，但是在抽象部分实现的时候需要具体功能的实现
                       这个时候通过这个桥就可以调用到实现部分的功能                
                         
     3、如何桥接：
      
                      只要让抽象部分拥有实现部分的接口对象，就桥接上了                      
    
     4、独立变化
     
                      桥接模式的目的是为了让抽象（消息类型）和实现 （消息发送方式）可以独立变化，分别扩充。
                      也就是说抽象部分和实现部分是一种非常松散的关系
     
     5、动态变换功能
     
                     由于桥接模式的抽象部分和实现部分是完全分离的，因此可以在运行时动态组合具体的真实实现
    
     6、桥接模式和继承
      
                    继承是扩充对象功能的一种常见手段，通常继承扩展功能变化维度是一维的，也就是变化的因素只有一类
                    但是当出现因素有两类时，继承就会比较痛苦，如上面，一个是消息的类别、一个是消息的发送方式。
                    如果是继承的方式实现，那么实现对象是 两个维度上 可变数量的乘积那么多。
                   这样扩展起来就很麻烦       
                   
     7、谁来桥接
      
                   说直白点，就是谁负责创建 MessageImplementor 对象，大致有这几种方式：
          1、由客户端创建   MessageImplementor 对象，并在创建抽象部分对象的时候，把它设置进去。如示例的方式
          2、可以在抽象部分对象创建的时候，由抽象部分的对象自己来创建相应的 MessageImplementor对象，可以设置一些
                                  参数，他可以跟据参数来创建具体的 MessageImplementor对象     
          3、可以在AbstractMessage中选择并创建一个默认的AbstractMessage对象，然后子类可以跟据需要改变这个实现
          4、也可以使用简单工厂或者抽象工厂选择具体的     AbstractMessage对象
          5、如果使用IoC/DI容器的话，可以通过该容器创建具体的     AbstractMessage对象,并注入回去                               
     
     
     8、桥接模式本质：
     
                    面向接口编程，分离抽象和实现，使其独立变化。
                   多用对象组合，少用对象继承             
     
     9、何时使用桥接模式：
     
                   如果不希望抽象部分和实现部分采用固定的捆绑关系，可以使用桥接模式
                   如果出现抽象部分和实现部分都能够扩展的情况，可以使用桥接模式            
                   如果希望实现部分的修改不会对客户端产生影响，可以使用桥接模式。
                   如果使用继承的方式会产生很多子类，可以使用桥接模式                          
                    
     
    
      二、实例   
      
      1、示例说明：
      
                           有这样一个业务：发送提示消息。基本所有的业务系统都有这个功能，比如某人有新的任务，则发送一条提示消息
                           从业务上看，消息分为：普通消息、加急消息和特急消息多种，不同的消息类型，业务功能处理也不一样。
                                                                     比如加急消息，是在消息上添加加急，而特急消息除了添加加急外，还会添加一条催促的记录，
                                                                    多久不完成会继续催促；
                           从发送消息的手段上看分为:系统内消息、手机端消息、邮件等                                        
                                                              
                            普通消息：发送方式只有系统内消息和邮件 ，后续版本再扩充            
                            加急消息：会在普通消息上添加加急，另外会提供监控的方法，让客户端了解对加急消息的处理进度                                        
                            特急消息：特急消息不需要查看处理进程，只要没完成，就直接催促。对于特急消息，是在普通消息上面再增加催促的功能
                                                 消息类型还是分为：站内短消息和E-mail消息                              
                            
                           不用模式的解决方案，见example
                           
     2、存在的问题：
     
                               现在每次扩展一个新的消息，都必须实现站内消息、E-mail消息这两种类型。假设现在都要扩充一种发送手机消息的方式，
                        那么需要每一种的抽象的具体实现，都要添加手机消息的处理。
                             这意味着，需要添加三个实现，那这样太麻烦了。
                             故上面存在的问题就是：扩展消息的种类太不容易 ，没次引入一种新的发送方式，所有都要改。                                 
                                                             
                         这时候就可以使用桥接模式了，具体如上                 
                           
                           
                           
                           
                           
                           
                           
                           
                                                         
                           
                           
                            